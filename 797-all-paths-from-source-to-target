class Solution {
public:
    void dfsBacktrack(int ind, vector<vector<int>>& graph, vector<int> &path, vector<vector<int>> &ans)
    {
        path.push_back(ind); // push current index
        // base case
        // if we reach end of graph, we push our current path to ans and return function call
        if(ind==graph.size()-1)
        {
            ans.push_back(path);
            return;
        }

        // now we go to all possible nodes we can go from this ind
        for(auto it: graph[ind])
        {
            dfsBacktrack(it, graph, path, ans);
            path.pop_back(); // backtrack
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        // we can use dfs+backtracking to get all possible paths
        vector<int> path;
        vector<vector<int>> ans;
        dfsBacktrack(0, graph, path, ans);
        return ans;
    }
};
